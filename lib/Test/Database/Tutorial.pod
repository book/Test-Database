=head1 NAME

Test::Database::Tutorial - How to use Test::Database

=head1 INTRODUCTION

The goal of the C<Test::Database> module is to provide easy to use test
databases for test scripts that need them.

=head2 The problem

Until now, when a test script needed a database, it either used SQLite
(or some other easy to setup database), or required some environment
variables to be present, or used default credentials, or even set up
the database by itself.

Most of those methods have pros and cons:

=over 4

=item *

using SQLite

No setup needed, but the test script can only use SQLite's dialect of SQL.
So much for portability across database engines.

=item *

using environement variables

The environment variables are different for every module to test, and
usually only the main developers/testers know about them. Since most of
the CPAN testers probably don't bother setting them up, these modules
are most certainly undertested.

=item *

using default credentials

Typically using C<'root'> and C<''> to connect to the C<test> MySQL
database, these test script assume a default installation on the host
system. These credentials often provide full access to the database
engine, which is a security risk in itself (see below).

=item *

setting up the database by itself

This method usually uses the default credentials to access an account
with enough privileges to create a database. The host system data may
be at risk!

=back


=head2 A solution: C<Test::Database>

Many modules use a database to store their data, and often support
several database engines.

Wouldn't it be nice to be able to test on all the supported databases
that are available on the test system? Without breaking (into) anything?

This is the goal of the C<Test::Database> module. It supports:

=over 4

=item *

getting DSN information from a list of pre-configured database and engines

=item *

automatic detection of "file-based" database engines (typically, SQLite).

=back

The rest of this document describes various use cases for C<Test::Database>.


=head1 MODULE AND TEST AUTHOR

C<Test::Database> has a single interface for test authors:

    my @handles = Test::Database->handles( @requests );

C<@request> is a list of "requests" for databases handles. Requests
must declare the DBD they expect, and can optionaly add version-based
limitations (only available for drivers supported by C<Test::Database>).

The handles returned are objects of the C<Test::Database::Handle> class.

The data contained in the database is never destroyed or cleaned
up by C<Test::Database>, so it's perfectly fine to have a startup script
that will setup the necessary tables and test data, several tests scripts
that will build and update the data, and a eventually a teardown script
that will drop all created tables.

C<Test::Database> can return two types of databases handles:

=over 4

=item *

either a handle to a newly created database (created especially at the
test script's request)

=item *

or a handle to an already existing database

=back

There is no way for the test script to tell the difference.

In any case, the database is assumed to provide C<DROP TABLE> and
C<CREATE TABLE> rights, and the test script is by definition allowed
to do whatever it pleases with the tables that exist in the database.

Note that C<Test::Database> supports any DSN, not just those for which
it has a driver. If your module supports Oracle, you can add C<'Oracle'>
to your list of requests, and if the host owner configured a C<dsn>
pointing at an Oracle database, then it will be available for your tests.

=head2 Specific database support

It is possible to request specific versions of a database engine.

    use Test::Database;

    # request database handles for all available databases
    my @handles = Test::Database->handles();

    # or for only the databases we support
    my @handles = Test::Database->handles(
        { dbd => 'SQLite' },
        { dbd => 'SQLite2' },
        { dbd => 'mysql', min_version => '4.0' },
    );

See L<Test::Database> documentation for details about how
to write a request.

=head2 Testing on a development box

The first systems on which you are going to test your module are the
ones you own. On these system, it's up to you to configure the databases
you want to make available.

A typical F<~/.test-database> configuration file would look like this:

    dsn      = dbi:mysql:database=test
    username = root

    dsn      = dbi:Pg:database=test
    username = postgres

    dsn      = dbi:Oracle:test

There is no need to worry about the file-based drivers, as they can
create databases as needed.


=cut

